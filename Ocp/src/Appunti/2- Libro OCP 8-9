########################################################################################### CAPITOLO 8 ##############################################################################################
----------------------------------------- FILE --------------------------------------------
The File class is used to read information about existing fi les and directories, list the contents of a directory, and create/delete files and directories.
The File class cannot read or write data within a file, although it can be passed as a reference to many stream classes to read or write data.

The ABSOLUTE PATH of a file or directory is the full path from the root directory to the file or directory, including all subdirectories that contain the file or directory.
Alternatively, the relative path of a file or directory is the path from the current working directory to file or directory.

/home/smith/data/zoo.txt    ABSOLUTE PATH
 
The following is a relative path to the same file, assuming the user’s current directory was set to /home/smith.

data/zoo.txt                RELATIVE PATH
Unixbased systems use  / for paths, whereas Windows-based systems use the backslash \ character. 
Java offers two options to retrieve the local separator character: 
a system property and a static variable defined in the File class. 

public class FileSample {
	public static void main(String[] args) {
	File file = new File("/home/smith/data/zoo.txt");
	System.out.println(file.exists());
    } 
}

File parent = new File("/home/smith");
File child = new File(parent,"data/zoo.txt");   // se parent è null java lo ignora e utilizza solo il secondo
é equivalente  quello di prima.

------------------ COMMONLY USED JAVA.IO.FILE METHODS -------------------------------------------------
1 exists() Returns true if the file or directory exists.
2 getName() Returns the name of the file or directory denoted by this path.
3 getAbsolutePath() Returns the absolute pathname string of this path.
4 isDirectory() Returns true if the file denoted by this path is a directory.
5 isFile() Returns true if the file denoted by this path is a file.
6 length() Returns the number of bytes in the file. For performance reasons, the file system may allocate more bytes on disk than the file actually uses.
7 lastModified() Returns the number of milliseconds since the epoch when the file was last modified.
8 delete() Deletes the file or directory. If this pathname denotes a directory, then the directory must be empty in order to be deleted.
9 renameTo(File) Renames the file denoted by this path.
10 mkdir() Creates the directory named by this path.
11 mkdirs() Creates the directory named by this path including any nonexistent parent directories.
12 getParent() Returns the abstract pathname of this abstract pathname’s parent or null if this pathname does not name a parent directory.
13 listFiles() Returns a File[] array denoting the files in the directory.

----------------- INTRODUCING STREAMS ----------------------------------------------------------------------
Note that the I/O streams that we discuss in this chapter are data streams and completely unrelated to the new Stream API that you saw.
