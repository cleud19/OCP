 ############################## CAPITOLO 4 ##########################################
 USARE VARIABILI NEI LAMBDA 
 Lambda expressions can access 
 static variables, 
 instance variables, 
 effectively final method parameters,
 and effectively final local variables.
-------------------------------------------------------------------

INTERFACCIA        PARAMETRI   RETURN TYPE   METHOD
Supplier<T>		       0           T         get
Consumer<T> 	       1 (T)       void      accept
BiConsumer<T, U> 	   2 (T, U)    void      accept
Predicate<T>    	   1 (T)       boolean   test
BiPredicate<T, U> 	   2 (T, U)    boolean   test
Function<T, R>  	   1 (T)       R         apply
BiFunction<T, U, R>	   2 (T, U)    R         apply
UnaryOperator<T>       1 (T)       T         apply
BinaryOperator<T>      2 (T, T)    T         apply

--------------------------------------------------------------------

 STREAMS
  1 Stream<String> s = Stream.of("brown bear-", "grizzly-");
  2 s.sorted(Comparator.reverseOrder()).forEach(System.out::print); // grizzly-brown bear-
 
  3 s.sorted(Comparator::reverseOrder); // DOES NOT COMPILE 
 
 Alla riga 2 va perche il sorted ha bisogno di un Comparator<T> e il comparator è un interfaccia funzionale che ha un metodo
 int compare(T,T); Ora nella riga due utilizzo il metodo statico dell'interfaccia Comparator per tornare un oggetto Comparator 
 cioe per tornare un implementazione del mio metodo compare.
 
 Alla riga 3 sto effettuando un method reference , cioe cerco di assegnare al metodo compare(T,T) che vuole il mio sort
 il metodo Comparator<T> reverseOrder() andando cosi in errore. 
 
 
 TERMINAL OPERATIONS 
 1.   count()         -   long count()
 	The count() method determines the number of elements in a finite stream. For an infinite
 	stream, it hangs. 
 
 2.   min() and max() -   Optional<T> min(<? super T> comparator)
	The min() and max() methods allow you to pass a custom comparator and find the smallest or largest value in a finite stream according to that sort order. Like count(), min() and
	max() hang on an infinite stream because they cannot be sure that a smaller or larger value
	isn’t coming later in the stream. 
	
	Stream<String> s = Stream.of("monkey", "ape", "bonobo");
	Optional<String> min = s.min((s1, s2) -> s1.length()—s2.length());
	min.ifPresent(System.out::println); // ape  
 
 3.   findAny() and findFirst()    -  Optional<T> findAny()
	The findAny() and findFirst() methods return an element of the stream unless the stream
	is empty. If the stream is empty, they return an empty Optional. This is the first method
	you’ve seen that works with an infinite stream. Since Java generates only the amount of
	stream you need, the infinite stream needs to generate only one element.
	
	Stream<String> s = Stream.of("monkey", "gorilla", "bonobo");
	Stream<String> infinite = Stream.generate(() -> "chimp");
	s.findAny().ifPresent(System.out::println); // monkey
	infinite.findAny().ifPresent(System.out::println); // chimp
	
4.    allMatch() , anyMatch() and noneMatch()   -  boolean anyMatch(Predicate <? super T> predicate) 
	The allMatch() , anyMatch() and noneMatch() methods search a stream and return information about how the stream pertains to the predicate. These may or may not terminate
	for infi nite streams. It depends on the data. Like the fi nd methods, they are not reductions
	because they do not necessarily look at all of the elements. 
	
	 List<String> list = Arrays.asList("monkey", "2", "chimp");
	 Stream<String> infinite = Stream.generate(() -> "chimp");
	 Predicate<String> pred = x -> Character.isLetter(x.charAt(0));
	 System.out.println(list.stream().anyMatch(pred)); // true
	 System.out.println(list.stream().allMatch(pred)); // false
	 System.out.println(list.stream().noneMatch(pred)); // false
	 System.out.println(infinite.anyMatch(pred)); // true 
		
5.   forEach()    - void forEach(Consumer<? super T> action) 
	A looping construct is available. As expected, calling forEach() on an infinite stream does
	not terminate. Since there is no return value, it is not a reduction. 
	While forEach() sounds like a loop, it is really a terminal operator for streams. 
	
	 Stream<String> s = Stream.of("Monkey", "Gorilla", "Bonobo");
 	 s.forEach(System.out::print); // MonkeyGorillaBonobo 
 	 
6.     reduce()    -       T reduce(T identity, BinaryOperator<T> accumulator) 

	 The reduce() method combines a stream into a single object. As you can tell from the
	 name, it is a reduction
	 
	  Stream<String> stream = Stream.of("w", "o", "l", "f");
	  String word = stream.reduce("", (s, c) -> s + c);
	  System.out.println(word); // wolf 
	  
	 Posso anche non specificare l'identity ma non essendo sicuro che ci sia un valore di ritorno in questo caso 
	 viene restituito un oggetto Optional.
	 
	 BinaryOperator<Integer> op = (a, b) -> a * b;
	 Stream<Integer> empty = Stream.empty();
	 Stream<Integer> oneElement = Stream.of(3);
	 Stream<Integer> threeElements = Stream.of(3, 5, 6);
	 
	 empty.reduce(op).ifPresent(System.out::print); // no output
	 oneElement.reduce(op).ifPresent(System.out::print); // 3
	 threeElements.reduce(op).ifPresent(System.out::print); // 90
	 
7.   collect()    -      <R> R collect(Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> combiner)
	The collect() method is a special type of reduction called a mutable reduction. It is
	more efficient than a regular reduction because we use the same mutable object while 
	accumulating. Common mutable objects include StringBuilder and ArrayList. 
	
	Stream<String> stream = Stream.of("w", "o", "l", "f");
	TreeSet<String> set = stream.collect(TreeSet::new, TreeSet::add,
	TreeSet::addAll);
	System.out.println(set); // [f, l, o, w]
	
	The collector has three parts as before. The supplier creates an empty TreeSet. The
	accumulator adds a single String from the Stream to the TreeSet. The combiner adds all
	of the elements of one TreeSet to another in case the operations were done in parallel and
	need to be merged. 
	
	La classe Collectors implementa molti tipi diversi di collectors che devi conoscere. Abbiamo visto prima la notazione piu lunga perche ci servirà nelkl'esame per 
	creare i nostri propri collectors. 
	
	Stream<String> stream = Stream.of("w", "o", "l", "f");
 	TreeSet<String> set = stream.collect(Collectors.toCollection(TreeSet::new));
 	System.out.println(set); // [f, l, o, w] 
	
 USING COMMON INTERMEDIATE OPERATIONS 
 
 1.   filter()   -    Stream<T> filter(Predicate<? super T> predicate) 
 	 Stream<String> s = Stream.of("monkey", "gorilla", "bonobo");
	 s.filter(x -> x.startsWith("m")).forEach(System.out::print); // monkey 
 
 2.  distinct()   -      Stream<T> distinct() 
     The distinct() method returns a stream with duplicate values removed
     
	 Stream<String> s = Stream.of("duck", "duck", "duck", "goose");
     s.distinct().forEach(System.out::print); // duckgoose 
     
 3. limit() and skip()   -   Stream<T> limit(int maxSize)  -    Stream<T> skip(int n) 
	The limit() and skip() methods make a Stream smaller. 
    
    Stream<Integer> s = Stream.iterate(1, n -> n + 1);
    s.skip(5).limit(2).forEach(System.out::print); // 67 
    
 4.  map()   -    <R> Stream<R> map(<? super T, ? extends R> mapper) 
    The map() method creates a one-to-one mapping from the elements in the stream to the elements of the next step in the stream.
    
	Stream<String> s = Stream.of("monkey", "gorilla", "bonobo");
 	s.map(String::length).forEach(System.out::print); // 676 
 	
 5. flatMap()    irrilevante troppo complessa la signature
	The flatMap() method takes each element in the stream and makes any elements it contains top-level elements in a single stream. This is helpful when you want to remove empty
	elements from a stream or you want to combine a stream of lists. 
	
	Quindi se ho una lista di liste , flatMap mi fa uno strem di elementi unici. 
	La differenza con map è che map associa ad ogni elemento un solo elemento nel nuovo stream. 
	FlatMap ad ogni elemento associa da 0 a n elementi nello stream risultante. 
	
	List<String> zero = Arrays.asList();
	List<String> one = Arrays.asList("Bonobo");
	List<String> two = Arrays.asList("Mama Gorilla", "Baby Gorilla");
	Stream<List<String>> animals = Stream.of(zero, one, two);
	animals.flatMap(l -> l.stream()).forEach(System.out::println);
	
	Bonobo
	Mama Gorilla
	Baby Gorilla

6.   sorted()   -    Stream<T> sorted() -   Stream<T> sorted(Comparator<? super T> comparator)
	The sorted() method returns a stream with the elements sorted. Just like sorting arrays,
	Java uses natural ordering unless we specify a comparator. The method signatures are

7.  peek()   -     Stream<T> peek(Consumer<? super T> action)   
    It is useful for debugging because it
	allows us to perform a stream operation without actually changing the stream. 
	
	 Stream<String> stream = Stream.of("black bear", "brown bear", "grizzly");
	 long count = stream.filter(s -> s.startsWith("g"))
	 .peek(System.out::println).count(); // grizzly 
		
---------------------------------------------------


25: List<String> cats = new ArrayList<>();
26: cats.add("Annie");
27: cats.add("Ripley");
28: Stream<String> stream = cats.stream();
29: cats.add("KC");
30: System.out.println(stream.count());
// stampa 3 

Vediamo che i streams sono lazily evaluated e quindi alla riga 28 lo stream non è veramente instaziato 
ma viene creato un oggetto che sa dove guardare quando verrà chiamato lo stream. 
Lo stream viene interpellato a riga 30 ed è solo allora che verra instanziato. 
------------------------------------------------------------
TOMAP
Stream<String> ohMy = Stream.of("lions", "tigers", "bears");
TreeMap<Integer, String> map = ohMy.collect(Collectors.toMap(
String::length, k -> k, (s1, s2) -> s1 + "," + s2, TreeMap::new));
System.out.println(map); // // {5=lions,bears, 6=tigers}
System.out.println(map.getClass()); // class. java.util.TreeMap

Qui con (s1, s2) -> s1 + "," + s2 specifico cosa fare nel caso di due chiavi identiche senza questo andrebbe in errore. 
Sotto con il groupingBy ho una funzione che lo fa apposta. 

GROUPINGBY

Stream<String> ohMy = Stream.of("lions", "tigers", "bears");
TreeMap<Integer, Set<String>> map = ohMy.collect(
 Collectors.groupingBy(String::length, TreeMap::new, Collectors.toSet()));
System.out.println(map); // {5=[lions, bears], 6=[tigers]}

PARTITIONINGBY
Il partitioning divide sempre per due gruppi true e false

Stream<String> ohMy = Stream.of("lions", "tigers", "bears");
Map<Boolean, Set<String>> map = ohMy.collect(
Collectors.partitioningBy(s -> s.length() <= 7, Collectors.toSet()));
System.out.println(map);// {false=[], true=[lions, tigers, bears]}

MAPPING
Il mapping ci fa specificare ancora un sottolivello di collect

Stream<String> ohMy = Stream.of("lions", "tigers", "bears");
Map<Integer, Optional<Character>> map = ohMy.collect(
 groupingBy(
 String::length,
 Collectors.mapping(s -> s.charAt(0),
 Collectors.minBy(Comparator.naturalOrder()))));
System.out.println(map); // {5=Optional[b], 6=Optional[t]}

Il secondo parametro di Mapping ci dice come raggruppare i valori.
maxBy(Comparator c)
minBy(Comparator c)
Finds the largest/smallest elements
Optional<T>

--------------------------------------
Recognize which operations cause a stream pipeline to execute. Intermediate operations
do not run until the terminal operation is encountered. If no terminal operation is in the
pipeline, a Stream is returned but not executed. Examples of terminal operations include
collect(), forEach(), min(), and reduce().

-----------------------------------------------------------------------------------------
The average() method returns an OptionalDouble since averages of any type can
result in a fraction.
-----------------------------------------------------------------------------------------
##################################   CAPITOLO 5    ##########################################

LocalDate 19/07/1995 only date

LocalTime  14:55 only time 

LocalDateTime 31/12/2020 00:00  date time 

ZonedDateTime  date, time, and time zone.  31/12/2020 9:00 a.m. EST.


System.out.println(LocalDate.now());  	    2015–05–25
System.out.println(LocalTime.now());	    09:13:07.768
System.out.println(LocalDateTime.now());    2015–05–25T09:13:07.768
System.out.println(ZonedDateTime.now());	2015–05–25T09:13:07.769–04:00[America/New_York]


LocalTime time3 = LocalTime.of(6, 15, 30, 200); //hour minute seconds nanoseconds
Naturalmente esiste labvariante ance con solo oa e minuti

Si possono mischiare le dichiarazioni di un DateTime
LocalDateTime dateTime1 = LocalDateTime.of(2015, Month.JANUARY, 20, 6, 15, 30);
LocalDateTime dateTime2 = LocalDateTime.of(date1, time1);


ZoneId zone = ZoneId.of("US/Eastern");
ZonedDateTime zoned1 = ZonedDateTime.of(2015, 1, 20, 6, 15, 30, 200, zone);
ZonedDateTime zoned2 = ZonedDateTime.of(date1, time1, zone);
ZonedDateTime zoned3 = ZonedDateTime.of(dateTime1, zone);

LocalDate d = new LocalDate(); // DOES NOT COMPILE
Don’t fall for this. You are not allowed to construct a date or time object directly.
Another trick is what happens when you pass invalid numbers to of(), for example:
LocalDate.of(2015, Month.JANUARY, 32) // throws DateTimeException

 LocalDate date = LocalDate.of(2014, Month.JANUARY, 20);

14: date = date.plusDays(2);  // 2014–01–22
16: date = date.plusWeeks(1);  / 2014–01–29
18: date = date.plusMonths(1); // 2014–02–28  (doveva essere il 29 ma java è intelligente e sa che non c'è)
20: date = date.plusYears(5); // 2019–02–28
Ricordati che le date sono oggetti immutabili e devi sempre reinstanziarle!

 February 29 exists only in a leap year. Leap years are years that are a multiple of 4 or 400 but not other multiples of 100. For example, 2000 and 2016
are leap years, but 2100 is not. 

LocalDate date = LocalDate.of(2020, Month.JANUARY, 20);
date = date.plusMinutes(1); // DOES NOT COMPILE
questo perche naturalmente una data non ha i minuti me un time , quindi attento all'esame cerceranno di fregarti cosi piu che altro attento 
quando le operazioni tornando tutti un oggetto date sono concatenate e fra le tante ce ne puo essere una non ammissibile. 

----------- PERIOD ---------------
Period annually = Period.ofYears(1); // every 1 year
Period quarterly = Period.ofMonths(3); // every 3 months
Period everyThreeWeeks = Period.ofWeeks(3); // every 3 weeks
Period everyOtherDay = Period.ofDays(2); // every 2 days
Period everyYearAndAWeek = Period.(1, 0, 7); // every year and 7 days

Period wrong = Period.ofYears(1).ofWeeks(1); // every week 
Questo perche i of...() sono metodi statici e quindi prende il valore dell'ultimo. 

Questa è l'annotazioe di un Period se stampato=   P1Y2M3D
Ricorda che se un valore è 0 allora l'annotazione non lo riporta 
System.out.println(Period.of(0, 20, 47));  //The output is P20M47D   it's OK for Period to have more days! or months!
System.out.println(Period.ofWeeks(3)); //This one outputs P21D

--------- DURATION -------------
Duration daily = Duration.ofDays(1); // PT24H
Duration hourly = Duration.ofHours(1); // PT1H
Duration everyMinute = Duration.ofMinutes(1); // PT1M
Duration everyTenSeconds = Duration.ofSeconds(10); // PT10S
Duration everyMilli = Duration.ofMillis(1); // PT0.001S
Duration everyNano = Duration.ofNanos(1); // PT0.000000001S

Duration daily = Duration.of(1, ChronoUnit.DAYS);
Duration hourly = Duration.of(1, ChronoUnit.HOURS);
Duration everyMinute = Duration.of(1, ChronoUnit.MINUTES);
Duration everyTenSeconds = Duration.of(10, ChronoUnit.SECONDS);
Duration everyMilli = Duration.of(1, ChronoUnit.MILLIS);
Duration everyNano = Duration.of(1, ChronoUnit.NANOS);

------------ INSTANT -------------
Descrive un dato istante preciso 
Instant now = Instant.now();

Instant instant = zonedDateTime.toInstant(); // 2015–05–25T15:55:00Z
System.out.println(zonedDateTime); // 2015–05–25T11:55–04:00[US/Eastern]
System.out.println(instant); // 2015–05–25T15:55:00Z

Instant puo essere preso da un ZoneDateTime che ha anche la zona vediamo che quando viene convertito in Istante avremo la notazione GMT ecco 
perche un LocalDateTime non puo essere convertito in Instant perche non puo essere universalmente riconosciuto.


Using that Instant, you can do math. Instant allows you to add any unit day or smaller,for example:
Instant nextDay = instant.plus(1, ChronoUnit.DAYS); // 2015–05–26T15:55:00Z
Instant nextHour = instant.plus(1, ChronoUnit.HOURS);// 2015–05–25T16:55:00Z
Instant nextWeek = instant.plus(1, ChronoUnit.WEEKS); // exception

It’s weird that an Instant displays a year and month while preventing you from doing
math with those fields. Unfortunately, you need to memorize this fact.
-----------DAYLIGHT SAVUNG TIME -------------------
Normal day   		1:00 am-1:59 am -> 2:00 am-3:00 am ->  3:00 am-4:00 am
March changeover	1:00 am-1:59 am -> 3:00 am-4:00 am
November changeover 1:00 am-1:59 am -> 1:00 am-1:59 am ->  3:00 am-4:00 am
Ricorda che nel cambiare se ti stampi pure il ZoneDateTime vedrai il GMT cambiare anche perche effettivamente cambia di +/-1 ora


-----------LOCALE AND LOCALIZATION -----------------------
You can think of a LOCALE as being like a language and country pairing. 
Localization includes translating strings to different languages. It also includes outputting dates and numbers in the correct format for that locale. 

Se predniamo il nostro locale con Locale.getDefault(); e lo stampiamo avremo: 
it_IT    dove it è la lingua e basta questo per definire un locale 
e IT è il paese dove siamo non è obbligatorio per definire un locale.

il linguaggio è obbligatorio eva scritto in minuscolo , se c'è il paese deve essere diviso da un  underscore e deve essere maiuscolo. 

Locale.GERMAN; 	    // de
Locale.GERMANY;     // de_DE:
new Locale("fr");   // fr
new Locale("hi", "IN"); // hi_IN 

Using the builder design pattern:

 Locale l1 = new Locale.Builder()
 .setLanguage("en")
 .setRegion("US")
 .build(); 

Se scrivi un Language uppercase erronemante il builder nel setLanguage si preoccupa di correggerlo quindi solo nel caso del builder non è errato anche se non 
è una best practice farlo perche rendi il codice meno leggibile.


 Locale locale = new Locale("fr");
 Locale.setDefault(locale); 
 Puoi settare solo per il tuo programma e temporaneamente il locale ad un altro. Lo userà l'esaminatore per dichiarare che locale sta usando nel codice del esame. 

------------------- USING A RESOURCE BUNDLE ----------------------

A resource bundle contains the local specific objects to be used by a program. It is like a map with keys and values. 
The resource bundle can be in a property file or in a Java class. A property file is a file in a specific format with key/value pairs.
Up until now, we’ve kept all of the strings from our program in the classes that use them.
Localization requires externalizing them to elsewhere. This is typically a property file, but it could be a resource bundle class.  
 

Zoo_en.properties
 hello=Hello
 open=The zoo is open.

Zoo_fr.properties
 hello=Bonjour
 open=Le zoo est ouvert
 
Locale localeUs = new Locale("en", "US");
ResourceBundle rb = ResourceBundle.getBundle("Zoo", localeUs);
System.out.println(rb.getString("hello"));

I file di properties possono essere scritti cosi: 
animal=dolphin
animal:dolphin
animal dolphin

# one comment
! another comment
# NB:Spaces before or after the separator character are ignored.!
# NB:Spaces at the beginning of a line are ignored.
# NB:Spaces at the end of a line are not ignored.
# NB:You can use normal Java escape characters like \t and \n
# NB:End a line with a backslash if you want to break the line for readability.
long = ab\
cd
se lo printo la chiave long mi viene -> abcd 

 Set<String> keys = rb.keySet();  // ritorna il set delle chiavi  

Notice that the filenames are the name of our resource bundle followed by an underscore followed by the target locale.  
--------------------------- PROPERTIES ---------------------------------- 
 
Java supports a class named Properties , itt is just like Maps but without all tne methods that map have. 
Properties props = new Properties();
props.put("key","valllue");

ora Property ha due metodi: 
1. props.getProperty("notReallyAProperty")  o props.getProperty("notReallyAProperty","defaultValue")
    che ti da la possibilita di designare un default nel caso non trovasse la property 
2. props.get("notReallyAProperty")    
    fa esattamente la stessa cosa ma se non trova la chiave tra le property torna null
 
 
--------------------------- JAVA CLASS RESOURCE BUNDLE --------------------------
Java class resource bundles allow any Java type as the value. Keys are strings regardless.

La classe che rappresenterà la mia resourse boundle estenderà ListResourceBundle e si chiamerà con la stessa logica Zoo_en 
1: import java.util.*;
2: public class Zoo_en extends ListResourceBundle {
3:     protected Object[][] getContents() {
4:         return new Object[][] {
5:             { "hello", "Hello" },
6:             { "open", "The zoo is open" } };
7: } }

1: package resourcebundles;
2: import java.util.*;
3: public class Tax_en_US extends ListResourceBundle {
4:     protected Object[][] getContents() {
5:         return new Object[][] { { "tax", new UsTaxCode() } };
6:     }
7:     public static void main(String[] args) {
8:         ResourceBundle rb = ResourceBundle.getBundle(
9:         "resourcebundles.Tax", Locale.US);             //package.NomeClasse, Locale
10:        System.out.println(rb.getObject("tax"));       //rb.getObject() perche non è una stringa
11: }}

--------------------------- DETERMINING WHICH RESOURCE BUNDLE TO USE   ---------------------------------------
ResourceBundle.getBundle("name");
ResourceBundle.getBundle("name", locale);


1 Zoo_fr_FR.java    requested locale  
2 Zoo_fr_FR.properties 
3 Zoo_fr.java
4 Zoo_fr.properties 
5 Zoo_en_US.java The default locale
6 Zoo_en_US.properties The default locale
7 Zoo_en.java 
8 Zoo_en.properties
9 Zoo.java  default bundle
10 Zoo.properties 
11 throw MissingResourceException.

Le cose da sapere sono che prima di tutto java andrà a cercare i .java 
Poi partendo dallo piu specifico va sul generale, sul default locale e infine sul bundle di default senza locale specifiato se esiste. 

Se carico il primo bundle 1 Zoo_fr_FR.java allora java andrà a cercarmi le vhiavi anche nei sotto bundle se esistenti: 

  Zoo_fr_FR.java
  Zoo_fr.java
  Zoo.java


-------------------- NUMBERFORMAT -----------------

 6: int attendeesPerYear = 3_200_000;
 7: int attendeesPerMonth = attendeesPerYear / 12;
 8: NumberFormat us = NumberFormat.getInstance(Locale.US);
 9: System.out.println(us.format(attendeesPerMonth)); //266,666 
 
 
PARSE 
The NumberFormat class defines a parse method for parsing a String into a number using a specific locale. 
You can assume that exceptions are properly handled. If you see parsing logic inside a method, make sure that ParseException or Exception is
handled or declared.

NumberFormat en = NumberFormat.getInstance(Locale.US);
NumberFormat fr = NumberFormat.getInstance(Locale.FRANCE);
String s = "40.45";
System.out.println(en.parse(s)); // 40.45
System.out.println(fr.parse(s)); // 40

String amt = "$92,807.99";
NumberFormat cf = NumberFormat.getCurrencyInstance();  //default us_US
double value = (Double) cf.parse(amt);   // THE RETURN VALUE OF PARSE IS A Number OBJECT. 
System.out.println(value); // 92807.99

---------------------------- DATETIMEFORMATTER -----------------------------

date.format(DateTimeFormatter.ISO_LOCAL_DATE)); 2020–01–20
time.format(DateTimeFormatter.ISO_LOCAL_TIME)); 11:12:34
dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)); 2020–01–20T11:12:34

DateTimeFormatter shortDateTime = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);
System.out.println(shortDateTime.format(dateTime)); // 1/20/20
System.out.println(dateTime.format(shortDateTime));

System.out.println(shortDateTime.format(date)); // 1/20/20
System.out.println(date.format(shortDateTime));

shortF.format(dateTime)); // 1/20/20 11:12 AM FormatStyle.SHORT
mediumF.format(dateTime)); // Jan 20, 2020 11:12:34 AM FormatStyle.MEDIUM

LocalDate date = LocalDate.parse(
"2018–04–30", DateTimeFormatter.ISO_LOCAL_DATE);


Possiamo creare anche il nostro formatter: 
DateTimeFormatter f = DateTimeFormatter.ofPattern("MMMM dd, yyyy, hh:mm");

MMMM      M represents the month. The more Ms you have, the more verbose the Java output. For
          example, M outputs 1, MM outputs 01, MMM outputs Jan, and MMMM outputs January.

dd        d represents the day in the month. As with month, the more ds you have, the more verbose the Java output. 
          dd means to include the leading zero for a single-digit day.

,         Use , if you want to output a comma (this also appears after the year).

yyyy      y represents the year. yy outputs a two-digit year and yyyy outputs a four-digit year.

hh 	      h represents the hour. Use hh to include the leading zero if you’re outputting a single-digit hour.

:         Use : if you want to output a colon.

mm        m represents the minute omitting the leading zero if present. mm is more common and
          represents the minutes using two digits.
