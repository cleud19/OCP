########################################################################################### CAPITOLO 10 ##############################################################################################
Nel JDK abbiamo 4 importanti interfacce che vengono implementate dal jar di connessione del database. 
-Driver: Knows how to get a connection to the database
-Connection: Knows how to communicate with the database
-Statement: Knows how to run the SQL
-ResultSet: Knows what was returned by a SELECT query

Modern driver JARs contain a file in META-INF/service called java.sql.Driver . This is the name of the implementation class of Driver . Older JARs do not, and they require Class.forName() to load the driver. 
-----------------Connecting to a Database--------------------------------
JDBC URL 


jdbc:postgresql://localhost/zoo
jdbc:oracle:thin:@123.123.123.123:1521:zoo
jdbc:mysql://localhost:3306/zoo?profileSQL=true

l'url e' divisa in 3 parti divise da : 
La prima parte contiene il protocollo :jdbc 
La seconda parte contiene Il product/vendor name 
La terza parte contiene i dettagli specifici del db e vediamo che cambiano , vediamo pero che c'e  sempre l'indirizzo ip oppure 'localhost (Se ci trovi un numero a caso o solo local e' errato)

A JDBC URL has three parts. The first part is the string jdbc, making choice C correct. The second part is the vendor/product name. The third part is database specific, but it
includes a database name, making choice B correct as well. The location, such as IP address
and port, is optional.
-------------Getting a Database Connection-------------------------------
Ci sono due modi 
1 DriverManager   usata nell'esame non usarla fuori 
2 DataSource      non usata nell'eame usala fuori 

public class TestExternal {ygo
 public static void main(String[] args) throws SQLException {
 	Connection conn = DriverManager.getConnection(
 	"jdbc:postgresql://localhost:5432/ocp-book",
 	"username",
 	"password");
 	System.out.println(conn);
 }
}

public static void main(String[] args) throws SQLException,
ClassNotFoundException {
 Class.forName("org.postgresql.Driver"); //possiamo aggiungere anche questa linea volendo ma lancia una classcastexception
 Connection conn = DriverManager.getConnection(
 "jdbc:postgresql://localhost:5432/ocp-book",
 "username",
 "password");
}

										JDBC <= 3.0 Driver   JDBC >= 4.0 Driver
Required to contain java.sql.Driver     			No 		Yes
Java will use java.sql.Driver file if present 		Yes 	Yes
Required to use Class.forName 						Yes 	No
Allowed to use Class.forName 						Yes 	Yes

----------------------------------- Obtaining a Statement -----------------------------------------

1 Statement stmt = conn.createStatement();

2 Statement stmt = conn.createStatement( ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
Ci sono due modi per creare uno Statement il primo e' il classico il secondo prende altri due parametri un TYPE e un CONCURRENCY
Vediamo le varie possibilita'
--------------------- Choosing a ResultSet Type-------------------------------------
 By default, a ResultSet is in TYPE_FORWARD_ONLY mode. This is what you need most of the time. You can go through the data once in the order in which it was retrieved
 ResultSet.TYPE_ SCROLL_INSENSITIVE e ResultSet.TYPE_ SCROLL_SENSITIVE sono gli altri due tipi con i quali posso scorrere i risultati in tutte le direzioni. Con il INSENSITIVE scorrero' i risultati 
 avuti dalla query, con SENSITIVE avro' i risultati modificati real time. 
------------------------ ResultSet Concurrency Mode --------------------------------
By default, a ResultSet is in CONCUR_READ_ONLY mode. Questo  e' il piu utilizzato anche per che se voglio fare delle modifiche al mio DB avro' le mie query per farlo. 
CONCUR_UPDATABLE ï¿½ l'altro con cui posso aggiornare il DB meglio non usarlo. 
 ------------------------------ Executing a Statement-------------------------------
 
 1.int executeUpdate()    It returns the number of rows that were inserted, deleted, or changed
 INSERT UPDATE E DELETE 
11: Statement stmt = conn.createStatement();
12: int result = stmt.executeUpdate(
13: "insert into species values(10, 'Deer', 3)");
14: System.out.println(result); // 1
15: result = stmt.executeUpdate(
16: "update species set name = '' where name = 'None'");
17: System.out.println(result); // 0
18: result = stmt.executeUpdate(
19: "delete from species where id = 10");
20: System.out.println(result); // 1

 2. ResultSet executeQuery() 
 SELECT
 ResultSet rs = stmt.executeQuery("select * from species");
 
 3. boolean execute()  
 Va sia sulle UPDATE che sulle SELECT 
 Se il tipo di ritorno  Ã¨ true allora  Ã¨  un ResultSet ed era una select altrimenti Ã¨ un int e ho fatto una Update.
 
 if (isResultSet) {
 	ResultSet rs = stmt.getResultSet();
 	System.out.println("ran a query");
 } else {
 	int result = stmt.getUpdateCount();
 	System.out.println("ran an update");
}
--------------------------------------GETTING DATA FROM A RESULTSET------------------------------------------
20: Map<Integer, String> idToNameMap = new HashMap<>();
21: ResultSet rs = stmt.executeQuery("select id, name from species");
22: while(rs.next()) {
23: 	int id = rs.getInt("id");
24: 	String name = rs.getString("name");
25: 	idToNameMap.put(id, name);
26: }
27: System.out.println(idToNameMap); // {1=African Elephant, 2=Zebra}

Un modo e'¨ quello di usare rs.getINt() o rs.getString() con il nome della colonna. 

20: Map<Integer, String> idToNameMap = new HashMap<>();
21: ResultSet rs = stmt. executeQuery ("select id, name from species");
22: while(rs.next()) {
23: 	int id = rs. getInt (1);
24: 	String name = rs. getString (2);
25: 	idToNameMap.put(id, name);
26: }
27: System.out.println(idToNameMap); // {1=African Elephant, 2=Zebra} 
Un secondo modo e' quello di usare invece del nome della colonna gli indici. Attento gli inidci partono da 1 e on da 0. 

Sbagliare un indice o un nome di una colonna lancera'  una SQLException. 

Ricordati di ciclare sempre il risultato con un if(rs.next()) o while(rs.next()) perche il puntatore all'inizio punta alla testata della tabella e con un rs.next() scende sotto alla prima riga e se esiste ti da true.
Naturalmente dobbiamo usare if() solo se abbiamo una sola riga.


Method Name    Return Type     Example Database Type
1 getBoolean   boolean 			  BOOLEAN
2 getDate      java.sql.Date 	  DATE
3 getDouble    double    		  DOUBLE
4 getInt       int 				  INTEGER
5 getLong      long 			  BIGINT
6 getObject    Object 	          Any type
7 getString    String 			  CHAR, VARCHAR
8 getTime      java.sql.Time 	  TIME
9 getTimeStamp java.sql.TimeStamp TIMESTAMP

GETDATE

if (rs.next()) {
 java.sql.Date sqlDate = rs.getDate(1);
 LocalDate localDate = sqlDate.toLocalDate();
 System.out.println(localDate); // 2001/05/06
}

GETTIME

if (rs.next()) {
 java.sql.Time sqlTime = rs.getTime(1);
 LocalTime localTime = sqlTime.toLocalTime();
 System.out.println(localTime); // 02:15
}

GETTIMESTAMP

java.sql.Timestamp sqlTimeStamp = rs.getTimestamp(1);
 LocalDateTime localDateTime = sqlTimeStamp.toLocalDateTime();
 System.out.println(localDateTime); // 2001/05/06T02:15
 
 
 
 
------------------------------------------------------ SCROLLING RESULTSET ---------------------------------------------------------------------------------
You have already learned the next() method. There is also a previous() method, which does the opposite. It moves backward one row and returns true if pointing to a valid row of data.
There are also methods to start at the beginning and end of the ResultSet. The first() and last() methods return a boolean for whether they were successful at finding a row.
The beforeFirst() and afterLast() methods have a return type of void, since it is always possible to get to a spot that doesn't have data.
 beforeFirst()  sarebbe la testata ------ afterLast() sarebbe la fine 
 
 
Statement stmt = conn.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
ResultSet rs = stmt.executeQuery("select id from species where id = -99");
System.out.println(rs.first()); // false   perceh non ci sono risultati
System.out.println(rs.last()); // false

Another method that you need to know is absolute(). It takes the row number to which you want to move the cursor as a parameter. A positive number moves the cursor to that numbered row. Zero moves the cursor to a location immediately before the first row.
A negative number means to start counting from the end of the ResultSet rather than from the beginning. You can see that -1 is the last row

                           ------------
               --->0       |ID  |FGDFG|  -5<----
                           ------------
               --->1       13   |     |  -4<----
               --->2       42   |     |  -3<----
               --->3       53   |     |  -2<----
               --->4       47   |     |  -1<----
               --->5
                           
36: Statement stmt = conn.createStatement(
37: ResultSet.TYPE_SCROLL_INSENSITIVE,
38: ResultSet.CONCUR_READ_ONLY);
39: ResultSet rs = stmt.executeQuery("select id from animal order by id");
40: System.out.println(rs.absolute(2)); // true
41: System.out.println(rs.getString("id")); // 2

Finally, there is a relative() method that moves forward or backward the requested number of rows. It returns a boolean if the cursor is pointing to a row with data. 
Ricorda di controllare quando vedi questi metodi se e' un resulset scrollabile o meno.

------------------------------------------------------------- CLOSING DATABASE RESOURCES -----------------------------------------------------------
public static void main(String[] args) throws SQLException {
 String url = " jdbc:derby:zoo";
 try (Connection conn = DriverManager.getConnection(url);
      Statement stmt = conn.createStatement();
      ResultSet rs = stmt.executeQuery("select name from animal")) {
 		while (rs.next())
 		System.out.println(rs.getString(1));
 	  }
 }
 
Vediamo qui che inizializziamo le nostre connessione con il try-with-resources cosi  che vengano chiuse quando abbiamo finito.
There is  another way to close a ResultSet. JDBC automatically closes a ResultSet when you run another SQL statement from the same Statement.
14: String url = jdbc:derby:zoo";
15: try (Connection conn = DriverManager.getConnection(url);
16: 	Statement stmt = conn.createStatement();
17: 	ResultSet rs = stmt.executeQuery("select count(*) from animal")) {
18:
19: 	if (rs.next()) System.out.println(rs.getInt(1));
20:
21: 	ResultSet rs2 = stmt.executeQuery("select count(*) from animal");
22: 	int num = stmt.executeUpdate(
23: 	"update animal set name = 'clear' where name = 'other'");
24: }
INfatti in questo pezzo di codice ci sono 4 chiusure poiche abbiamo creato un altro resultSet dallo stesso statement. 
--------------------------------------------------------------DEALING WITH EXCEPTIONS------------------------------------------------------------------------------------------------------------
String url = " jdbc:derby:zoo";
try (Connection conn = DriverManager.getConnection(url ");
	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery("select not_a_column from animal")) {
	while (rs.next())
		System.out.println(rs.getString(1));
} catch (SQLException e) {
	 System.out.println(e.getMessage());
	 System.out.println(e.getSQLState());
	 System.out.println(e.getErrorCode());
}
